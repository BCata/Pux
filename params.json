{"name":"Pux","tagline":"High Performance PHP Router.","body":"Pux\r\n=============\r\nPux is a high performance PHP router.\r\n\r\nPux is 48.5x faster than symfony router in static route dispatching, 31x faster in regular expression dispatching. (with pux extension installed)\r\n\r\n(Benchmark code and details here https://github.com/c9s/router-benchmark/blob/master/code)\r\n\r\nPux tries not to consume computation time to build all routes dynamically (like\r\nSymfony/Routing, although the RouteCompiler of Symfony/Routing caches the\r\ncompiled patterns, but there are still a lot of function call and class\r\nloading from your application code. however, function calls are pretty slow in PHP). \r\n\r\n[![Build Status](https://travis-ci.org/c9s/Pux.png?branch=master)](https://travis-ci.org/c9s/Pux)\r\n\r\nWhy It's Faster\r\n---------------\r\n\r\n- Pux uses simpler data structure (indexed array) to store the patterns and flags.\r\n    (In PHP internals, `zend_hash_index_find` is faster than `zend_hash_find`).\r\n\r\n- When matching routes, symfony uses a lot of function calls for each route:\r\n\r\n    https://github.com/symfony/Routing/blob/master/Matcher/UrlMatcher.php#L124\r\n\r\n    Pux fetches the pattern from an indexed-array:\r\n\r\n    https://github.com/c9s/Pux/blob/master/src/Pux/Mux.php#L189\r\n\r\n- Even you enabled APC or other bytecode cache extension, you are still calling\r\n  methods and functions in the runtime. Pux reduces the route building to one\r\n  static method call. `__set_state`.\r\n\r\n- Pux separates static routes and dynamic routes automatically, Pux uses hash\r\n  table to look up static routes without looping the whole route array.\r\n\r\n- Pux\\\\Mux is written in C extension, method calls are faster!\r\n\r\n- With C extension, there is no class loading overhead.\r\n\r\n- Pux compiles your routes to plain PHP array, the compiled routes can be\r\n  loaded very fast. you don't need to call functions to register your routes before using it.\r\n\r\n\r\nWhy It's Here\r\n--------------------\r\nMost of us use a lot of machines to run our applications, however, it uses too much energy and too many resources.\r\n\r\nBy using Pux, you can also decrease your expense of servers on cloud.\r\n\r\nAlso we believe that running softwares on slower machines should be easy as possible.\r\n\r\nSome people thinks routing is not the bottleneck, the truth is this project\r\ndoes not claim routing is the bottleneck.\r\n\r\nActually the bottleneck is always different in different applications, if you\r\nhave a lot of heavy db requests, then your bottleneck is your db; if you have a\r\nlot of complex computation, then the bottleneck should be your algorithm.\r\n\r\nYou might start wondering since the bottleneck is not routing, why do we\r\nimplement route dispatcher in C extension? The answer is simple, if you put a\r\npure PHP routing component with some empty callbacks and use apache benchmark\r\ntool to see how many requests you can handle per second, you will find out the\r\nrouting component consumes a lot of computation time and the request number\r\nwill decrease quite a few. (and it does nothing, all it does is ... just\r\nrouting!)\r\n\r\nSo Pux tries to reduce the overheads of loading PHP classes and the runtime\r\nmethod/function calls, and you can run your application faster without the overheads.\r\n\r\n\r\nFeatures\r\n--------------------\r\n\r\n- Zero dependency.\r\n- Low memory footprint (only 6KB with simple routes and extension installed) .\r\n- High performance of dispatching routes.\r\n- PCRE pattern path support. (Sinatra-style)\r\n- Request method condition support.\r\n- Domain condition support.\r\n- https condition support.\r\n\r\nRouting Path Format\r\n---------------------\r\n\r\n    /post\r\n    /post/:id                  => matches /post/33\r\n    /post/:id(/:title)         => matches /post/33, /post/33/post%20title\r\n    /post/:id(\\.:format)       => matches /post/33, /post/33.json .. /post/33.xml\r\n\r\nInstallation\r\n--------------------\r\nYou can install Pux with composer by defining the following requirement in your composer.json:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"corneltek/pux\": \"~1.3\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Install Extension\r\n\r\nTo install pux extension to boost the performance:\r\n\r\n```sh\r\ngit clone https://github.com/c9s/Pux.git\r\ncd Pux/ext\r\nphpize\r\n./configure\r\nmake && make install\r\n```\r\n\r\nOr you can configure the optimization flag to gain more when running `configure` command.:\r\n\r\n```sh\r\nCFLAGS=\"-O3\" ./configure\r\n```\r\n\r\nThen setup your php.ini config to load pux extension:\r\n\r\n```ini\r\nextension=pux.so\r\n```\r\n\r\n\r\nSynopsis\r\n------------\r\n\r\nThe routing usage is dead simple:\r\n\r\n```php\r\nrequire 'vendor/autoload.php'; // use PCRE patterns you need Pux\\PatternCompiler class.\r\nuse Pux\\Executor;\r\n\r\nclass ProductController {\r\n    public function listAction() {\r\n        return 'product list';\r\n    }\r\n    public function itemAction($id) { \r\n        return \"product $id\";\r\n    }\r\n}\r\n$mux = new Pux\\Mux;\r\n$mux->add('/product', ['ProductController','listAction']);\r\n$mux->add('/product/:id', ['ProductController','itemAction'] , [\r\n    'require' => [ 'id' => '\\d+', ],\r\n    'default' => [ 'id' => '1', ]\r\n]);\r\n$route = $mux->dispatch('/product/1');\r\nExecutor::execute($route);\r\n```\r\n\r\n\r\nExamples\r\n--------------------\r\n\r\n### Basic Example\r\n\r\n```php\r\nrequire 'vendor/autoload.php';\r\nuse Pux\\Mux;\r\nuse Pux\\Executor;\r\n$mux = new Mux;\r\n$mux->get('/get', ['HelloController','helloAction']);\r\n$mux->post('/post', ['HelloController','helloAction']);\r\n$mux->put('/put', ['HelloController','helloAction']);\r\n$route = $mux->dispatch( $_SERVER['PATH_INFO'] );\r\necho Executor::execute($route);\r\n```\r\n\r\n### Through Compiled Mux\r\n\r\nDefine your routing definition in `routes.php`:\r\n\r\n```php\r\nrequire 'vendor/autoload.php';\r\nuse Pux\\Mux;\r\n$mux = new Mux;\r\n$mux->get('/get', ['HelloController','helloAction']);\r\nreturn $mux;\r\n```\r\n\r\nRun pux command to compile your routing definition:\r\n\r\n```sh\r\ncurl -O https://raw.github.com/c9s/Pux/master/pux\r\nchmod +x pux\r\npux compile -o mux.php routes.php\r\n```\r\n\r\nLoad the mux object from your application code:\r\n\r\n```php\r\nrequire 'vendor/autoload.php';\r\n$mux = require 'mux.php';\r\n$route = $mux->dispatch( $_SERVER['PATH_INFO'] );\r\necho Executor::execute($route);\r\n```\r\n\r\n> Please note that if you need PCRE pattern support for route, you must load `Pux/PatternCompiler.php` before you use.\r\n\r\nMux\r\n-----\r\nMux is where you define your routes, and you can mount multiple mux to a parent one.\r\n\r\n```php\r\n$mainMux = new Mux;\r\n$mainMux->expand = true;\r\n\r\n$pageMux = new Mux;\r\n$pageMux->add('/page1', [ 'PageController', 'page1' ]);\r\n$pageMux->add('/page2', [ 'PageController', 'page2' ]);\r\n\r\n$mainMux->mount('/sub', $pageMux);\r\n\r\nforeach( ['/sub/page1', '/sub/page2'] as $p ) {\r\n    $r = $mainMux->dispatch($p);\r\n    ok($r, \"Matched route for $p\");\r\n}\r\n```\r\n\r\nThe `expand` option means whether to expand/merge submux routes to the parent mux.\r\n\r\nWhen expand is enabled, it improves dispatch performance when you\r\nhave a lot of sub mux to dispatch.\r\n\r\n\r\n### Sorting routes\r\n\r\nYou need to sort routes when not using compiled routes, it's because pux sorts\r\nlonger path to front:\r\n\r\n```php\r\n$pageMux = new Mux;\r\n$pageMux->add('/', [ 'PageController', 'page1' ]);\r\n$pageMux->add('/pa', [ 'PageController', 'page1' ]);\r\n$pageMux->add('/page', [ 'PageController', 'page1' ]);\r\n$pageMux->sort();\r\n```\r\n\r\nThis sorts routes to:\r\n\r\n```\r\n/page\r\n/pa\r\n/\r\n```\r\n\r\nSo pux first compares `/page`, `/pa`, than `/`.\r\n\r\n### Different String Comparison Strategies\r\n\r\nWhen expand is enabled, the pattern comparison strategy for \r\nstrings will match the full string.\r\n\r\nWhen expand is disabled, the pattern comparison strategy for \r\nstrings will match the prefix.\r\n\r\n\r\n\r\nAPCDispatcher\r\n----------------------\r\nAlthough Pux\\\\Mux is already fast, you can still add APCDispatcher to boost the\r\nperformance, which is to avoid re-lookup route.\r\n\r\nThis is pretty useful when you have a lot of PCRE routes.\r\n\r\n```\r\nuse Pux\\Dispatcher\\APCDispatcher;\r\n$dispatcher = new APCDispatcher($mux, array(\r\n    'namespace' => 'app_',\r\n    'expiry' => ...,\r\n));\r\n$route = $dispatcher->dispatch('/request/uri');\r\nvar_dump($route);\r\n```\r\n\r\nPersistent Dispatcher\r\n---------------------\r\nRather than reload the mux object from php file everytime (or load from APC), there still a lot of overhead. \r\n\r\nPux provides a persistent way to dispatch your route and keep the routes array in the persistent memory:\r\n\r\n```php\r\n$r = pux_persistent_dispatch('hello', 'hello_mux.php', '/hello');\r\n```\r\n\r\n> Please note that the `hello_mux.php` must be a compiled mux PHP file.\r\n> The `pux_persistent_dispatch` is only available in extension.\r\n\r\n\r\nController\r\n--------------------\r\n\r\nPux provides a simple fast controller in C extension, you can mount your controller methods to paths automatically:\r\n\r\n```php\r\nclass ProductController extends \\Pux\\Controller\r\n{\r\n    // translate to path \"\"\r\n    public function indexAction() { }\r\n\r\n    // translate to path \"/add\"\r\n    public function addAction() { }\r\n\r\n    // translate to path \"/del\"\r\n    public function delAction() { }\r\n}\r\n\r\n$mux = new Pux\\Mux;\r\n$mux->mount( '/product' , $controller->expand() );\r\n\r\n$mux->dispatch('/product');       // ProductController->indexAction\r\n$mux->dispatch('/product/add');   // ProductController->addAction\r\n$mux->dispatch('/product/del');   // ProductController->delAction\r\n```\r\n\r\n\r\n\r\nMuxCompiler\r\n--------------------\r\n\r\nIn your route definition file `hello_routes.php`, you simply return the Mux object at the end of file:\r\n\r\n```php\r\n<?php\r\n// load your composer autoload if it's needed\r\n// require '../vendor/autoload.php';\r\nuse Pux\\Mux;\r\nuse Pux\\Executor;\r\n$mux = new Mux;\r\n$mux->get('/hello', ['HelloController','helloAction']);\r\nreturn $mux;\r\n```\r\n\r\nPux provides a command-line tool for you to compile your route definitions.\r\n\r\n    pux compile -o hello_mux.php hello_routes.php\r\n\r\nIn your application, you may load the compiled mux (router) through only one line:\r\n\r\n```php\r\n<?php\r\n$mux = require \"hello_mux.php\";\r\n$route = $mux->dispatch('/hello');\r\n```\r\n\r\nThis can be very very fast if you have pux extension installed.\r\n\r\nDispatching Strategy\r\n--------------------\r\n\r\nThere are two route dispatching strategies in Pux while Symfony/Routing only\r\nprovides PCRE pattern matching:\r\n\r\n1. Plain string comparison.\r\n2. PCRE pattern comparison.\r\n\r\nYou've already knew that PCRE pattern matching is slower than plain string comparison, although PHP PCRE caches the compiled patterns.\r\n\r\nThe plain string comparison is designed for static routing paths, it\r\nimproves the performance while you have a lot of simple routes.\r\n\r\nThe PCRE pattern comparison is used when you have some dynamic routing paths,\r\nfor example, you can put some place holders in your routing path, and pass\r\nthese path arguments to your controller later.\r\n\r\nPux sorts and compiles your routes to single cache file, it also uses longest\r\nmatching so it sorts patterns by pattern length in descending order before compiling the\r\nroutes to cache.\r\n\r\nPux uses indexed array as the data structure for storing route information so it's faster.\r\n\r\n\r\n\r\n## Benchmarks\r\n\r\nTesting with route dispatch only. (no controller)\r\n\r\nHardware:\r\n\r\n- iMac Mid 2011\r\n- Processor  2.5 GHz Intel Core i5\r\n- Memory  12 GB 1333 MHz DDR3\r\n- Software  OS X 10.9.1 (13B42)\r\n\r\nEnvironment:\r\n\r\n- PHP 5.5.6 + APC\r\n\r\n\r\n### Dispatch Speed\r\n\r\nWith one static route:\r\n\r\n    n=10000\r\n    Running pux extension (dispatch) - . 97487.768426386/s\r\n    Running symfony/routing (dispatch) - . 2456.3512428418/s\r\n    \r\n                                    Rate   Mem pux extension (dispatch) symfony/routing (dispatch)\r\n      pux extension (dispatch)  97.49K/s    0B                       --                        -2%\r\n    symfony/routing (dispatch)   2.46K/s  524K                    3968%                         --\r\n    \r\n    \r\n    ================================== Bar Chart ==================================\r\n    \r\n        pux extension (dispatch)  97.49K/s | ████████████████████████████████████████████████████████████  |\r\n      symfony/routing (dispatch)   2.46K/s | █                                                             |\r\n    \r\n    \r\n    ============================== System Information ==============================\r\n    \r\n    PHP Version: 5.5.6\r\n    CPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz\r\n    \r\n    With XDebug Extension.\r\n\r\nWith one pcre route:\r\n\r\n    n=5000\r\n    Running pux extension (dispatch) - . 68264.888935184/s\r\n    Running symfony/routing (dispatch) - . 2245.5539220463/s\r\n    \r\n                                    Rate   Mem pux extension (dispatch) symfony/routing (dispatch)\r\n      pux extension (dispatch)  68.26K/s    3M                       --                        -3%\r\n    symfony/routing (dispatch)   2.25K/s  786K                    3040%                         --\r\n    \r\n    \r\n    ================================== Bar Chart ==================================\r\n    \r\n        pux extension (dispatch)  68.26K/s | ████████████████████████████████████████████████████████████  |\r\n      symfony/routing (dispatch)   2.25K/s | █                                                             |\r\n    \r\n    \r\n    ============================== System Information ==============================\r\n    \r\n    PHP Version: 5.5.6\r\n    CPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz\r\n\r\n\r\nCompare to other PHP routers (test code: <https://github.com/c9s/router-benchmark/blob/master/code/dispatch.php> ):\r\n\r\n<pre>\r\nn=10000\r\nRuning php array - . 138796.45654569/s\r\nRuning pux - . 124982.98519026/s\r\nRuning klein - . 1801.5070399717/s\r\nRuning ham - . 13566.734991391/s\r\nRuning aura - . 39657.986477172/s\r\nRuning symfony/routing - . 1934.2415677861/s\r\n\r\n                     Rate   Mem php array pux aura ham symfony/routing klein\r\n      php array  138.8K/s    0B        ---90% -28% -9%             -1%   -1%\r\n            pux 124.98K/s    0B      111%  -- -31%-10%             -1%   -1%\r\n           aura  39.66K/s    0B      349%315%   ---34%             -4%   -4%\r\n            ham  13.57K/s    0B     1023%921% 292%  --            -14%  -13%\r\nsymfony/routing   1.93K/s  786K     7175%6461%2050%701%              --  -93%\r\n          klein    1.8K/s  262K     7704%6937%2201%753%            107%    --\r\n\r\n\r\n================================== Bar Chart ==================================\r\n\r\n        php array  138.8K/s | ████████████████████████████████████████████████████████████  |\r\n              pux 124.98K/s | ██████████████████████████████████████████████████████        |\r\n             aura  39.66K/s | █████████████████                                             |\r\n              ham  13.57K/s | █████                                                         |\r\n  symfony/routing   1.93K/s |                                                               |\r\n            klein    1.8K/s |                                                               |\r\n\r\n\r\n============================== System Information ==============================\r\n\r\nPHP Version: 5.5.6\r\nCPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz\r\n\r\nWith XDebug Extension.\r\n</pre>\r\n\r\n\r\n### Through Apache\r\n\r\nPlease see benchmark details here: <https://github.com/c9s/router-benchmark>\r\n","google":"UA-2196512-14","note":"Don't delete this file! It's used internally to help with page regeneration."}