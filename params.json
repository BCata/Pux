{"name":"Phux","tagline":"High Performance PHP Router.","body":"Pux\r\n=============\r\nPux is a High Performance PHP Router.\r\n\r\nPux tries not to consume computation time to build all routes dynamically (like Symfony/Routing). Instead,\r\nPux compiles your routes to plain PHP array for caching, the compiled routes can be loaded from cache very fast.\r\n\r\nWith Pux PHP Extension support, you may load and dispatch the routes 2x faster than pure PHP Pux.\r\n\r\nMuxCompiler\r\n--------------------\r\n\r\nIn your route definition file `hello_routes.php`, you simply return the Mux object at the end of file:\r\n\r\n```php\r\n<?php\r\n// load your composer autoload if it's needed\r\n// require '../vendor/autoload.php';\r\nuse Pux\\Mux;\r\n$mux = new Mux;\r\n$mux->get('/hello', ['HelloController','helloAction']);\r\nreturn $mux;\r\n```\r\n\r\nPux provides a command-line tool for you to compile your route definitions.\r\n\r\n    pux compile -o hello_mux.php hello_routes.php\r\n\r\nIn your application, you may load the compiled mux (router) through only one line:\r\n\r\n```php\r\n<?php\r\n$mux = require \"hello_mux.php\";\r\n$route = $mux->dispatch('/hello');\r\n```\r\n\r\nThis can be very very fast if you have pux extension installed.\r\n\r\nDispatching Strategy\r\n--------------------\r\n\r\nThere are two route dispatching strategies in Pux while Symfony/Routing only\r\nprovides PCRE pattern matching:\r\n\r\n1. Plain string comparison.\r\n2. PCRE pattern comparison.\r\n\r\nYou've already knew that PCRE pattern matching is slower than plain string comparison, although PHP PCRE caches the compiled patterns.\r\n\r\nThe plain string comparison is designed for static routing paths, it\r\nimproves the performance while you have a lot of simple routes.\r\n\r\nThe PCRE pattern comparison is used when you have some dynamic routing paths,\r\nfor example, you can put some place holders in your routing path, and pass\r\nthese path arguments to your controller later.\r\n\r\nPux sorts and compiles your routes to single cache file, it also uses longest\r\nmatching so it sorts patterns by pattern length in descending order before compiling the\r\nroutes to cache.\r\n\r\nPux uses indexed array as the data structure for storing route information so it's faster.\r\n\r\n\r\nSynopsis\r\n------------\r\n\r\nThe routing usage is dead simple:\r\n\r\n```php\r\nclass ProductController {\r\n    public function listAction() {\r\n        return 'product list';\r\n    }\r\n    public function itemAction($id) { \r\n        return \"product $id\";\r\n    }\r\n}\r\n$mux = new Pux\\Mux;\r\n$mux->add('/product', ['ProductController','listAction']);\r\n$mux->add('/product/:id', ['ProductController','itemAction'] , [\r\n    'require' => [ ':id' => '\\d+', ],\r\n    'default' => [ ':id' => '1', ]\r\n]);\r\n$route = $mux->dispatch('/product/1');\r\n```\r\n\r\nMux\r\n-----\r\nMux is where you define your routes, and you can mount multiple mux to a parent one.\r\n\r\n```php\r\n$mainMux = new Mux;\r\n$mainMux->expandSubMux = true;\r\n\r\n$pageMux = new Mux;\r\n$pageMux->add('/page1', [ 'PageController', 'page1' ]);\r\n$pageMux->add('/page2', [ 'PageController', 'page2' ]);\r\n\r\n$mainMux->mount('/sub', $pageMux);\r\n\r\nforeach( ['/sub/page1', '/sub/page2'] as $p ) {\r\n    $r = $mainMux->dispatch($p);\r\n    ok($r, \"Matched route for $p\");\r\n}\r\n```\r\n\r\nThe `expandSubMux` option means whether to expand/merge submux routes to the parent mux.\r\n\r\nWhen expandSubMux is enabled, it improves dispatch performance when you\r\nhave a lot of sub mux to dispatch.\r\n\r\n### Different String Comparison Strategies\r\n\r\nWhen expandSubMux is enabled, the pattern comparison strategy for \r\nstrings will match the full string.\r\n\r\nWhen expandSubMux is disabled, the pattern comparison strategy for \r\nstrings will match the prefix.\r\n\r\n\r\n## Benchmarks\r\n\r\nTesting with route dispatch only. (no controller)\r\n\r\nHardware:\r\n\r\n- iMac Mid 2011\r\n- Processor  2.5 GHz Intel Core i5\r\n- Memory  12 GB 1333 MHz DDR3\r\n- Software  OS X 10.9.1 (13B42)\r\n\r\nEnvironment:\r\n\r\n- Apache 2.2 + prefork worker\r\n- PHP 5.5.6\r\n\r\nPrefork configuration:\r\n\r\n    StartServers          2\r\n    MinSpareServers       3\r\n    MaxSpareServers       3\r\n    MaxClients           30\r\n    MaxRequestsPerChild  1000\r\n\r\n\r\n### Requests per seconds\r\n\r\n<img src=\"https://raw.github.com/c9s/Pux/master/benchmarks/reqs.png\"/>\r\n\r\n### Response Time\r\n\r\nPux - PURE PHP (around 3ms~38ms)\r\n\r\n<img src=\"https://raw.github.com/c9s/Pux/master/benchmarks/pux.png\"/>\r\n\r\nPux - with extension \r\n\r\n<https://gist.github.com/c9s/8273098>\r\n\r\nSymfony/Routing (around 9ms~146ms)\r\n\r\n<img src=\"https://raw.github.com/c9s/Pux/master/benchmarks/symfony-routing.png\"/>\r\n\r\n\r\n","google":"UA-2196512-14","note":"Don't delete this file! It's used internally to help with page regeneration."}